{"version":3,"file":"main.js","mappings":"mBAAO,IAAI,EAAY,GCIvB,SAASA,EACLC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAuB,iBAATH,EAAoBA,EAAO,OACzCI,EAAuB,iBAATJ,EAAoBA,EAAuB,iBAATC,EAAoBA,OAAOI,EAC3EC,EAA4B,kBAATN,EAAqBA,EAAuB,kBAATC,EAAqBA,EAAOC,IAAQ,EAEhGK,GAAGC,cAAcV,OCTd,YAAqBW,GACxB,IAAKC,EAAKN,GAAQK,EAElB,OADAC,EAAM,GAAG,KAAaA,IAClBN,EAAaO,KAAKC,KAAKC,OAAOH,EAAKN,GAChCO,KAAKC,KAAKE,SAASJ,EAC9B,CDI4BI,CAASf,EAAKK,GAAOD,EAAM,CAAEG,aACzD,CEbO,SAASS,EACZC,EACAC,EACAd,EAAyC,WAEzCe,WAAWC,SAAS,EAAWH,EAAQC,EAAId,EAC/C,CCYAiB,eAAeC,EAAoCC,GAC/C,GAAIC,KAAKC,SAAU,OAAOF,IAE1B,MAAMG,EAAQF,KAAKE,MACnB,IAAKA,IAAUA,EAAMC,SAAS,aAAc,OAAOJ,IAEnD,MAAMK,EAAQF,EAAME,MAEpBJ,KAAKK,OAAOC,YAAYC,MAAQH,EAAQ,EAAI,KAAOA,EAAQ,GAAK,EAAIA,EAAQ,GAAK,EAAI,EACrFJ,KAAKK,OAAOG,eAAeD,MACvBH,EAAQ,EAAI,KAAOA,EAAQ,GAAK,YAAcA,EAAQ,GAAK,mBAAqB,iBAEpFL,GACJ,CAEAF,eAAeY,EAAsCV,GACjD,MAAMG,EAAQF,KAAKE,MACnB,IAAKA,IAAUA,EAAMC,SAAS,aAAc,OAAOJ,IAEnD,MAAMK,EAAQF,EAAME,MAEpB,GAAIJ,KAAKU,QAAQL,OAAOM,UAAW,CAC/B,MAAMC,EAASZ,KAAKU,QAAQL,OAAOO,OAAOL,MAC1C,GAAIK,EAAOC,SAAS,eAAiBD,EAAOC,SAAS,QAAS,OAAOd,G,CAGzEC,KAAKK,OAAOC,YAAYC,MAAQH,EAAQ,EAAI,KAAOA,EAAQ,GAAK,EAAIA,EAAQ,GAAK,EAAI,EACrFJ,KAAKK,OAAOS,aAAaP,MAAQH,EAAQ,EAAI,KAAOA,EAAQ,GAAK,WAAaA,EAAQ,GAAK,kBAAoB,gBAE/GL,GACJ,CJ/CS,IAAW,EICK,YAGzBgB,MAAMC,KAAK,oBAAoB,SAE/BD,MAAMC,KAAK,SAAS,KAChBxB,EAAgB,oEAAqEiB,GACrFjB,EAAgB,mEAAoEM,GAE/EV,KAAK6B,KAAKC,MAC4C,UAAvD9B,KAAK+B,SAASC,IAAI,OAAQ,2BAC1BhC,KAAK+B,SAASE,IAAI,OAAQ,wBAAyB,SHOpD,YAAiBnC,GACpB,MAAOV,EAAKC,EAAMC,GAAQQ,EAC1BX,EAAOC,EAAK,OAAQC,EAAMC,EAC9B,CGTQ,CAAK,gB","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///../../../../foundryVTT-projects/@utils/libwrapper.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n    }\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function registerWrapper(\r\n    target: string,\r\n    fn: libWrapper.RegisterFunction,\r\n    type: 'WRAPPER' | 'MIXED' | 'OVERRIDE' = 'WRAPPER'\r\n) {\r\n    libWrapper.register(MODULE_ID, target, fn, type)\r\n}\r\n","import { info } from '@utils/foundry/notification'\r\nimport { registerWrapper } from '@utils/libwrapper'\r\nimport { setModuleID } from '@utils/module'\r\n\r\nexport const MODULE_ID = 'pf2e-arp'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('libWrapper.Ready', () => {})\r\n\r\nHooks.once('ready', () => {\r\n    registerWrapper('CONFIG.PF2E.Item.documentClasses.weapon.prototype.prepareBaseData', onPrapareWeaponData)\r\n    registerWrapper('CONFIG.PF2E.Item.documentClasses.armor.prototype.prepareBaseData', onPrepareArmorData)\r\n\r\n    if (!game.user.isGM) return\r\n    if (game.settings.get('pf2e', 'automaticBonusVariant') !== 'noABP') {\r\n        game.settings.set('pf2e', 'automaticBonusVariant', 'noABP')\r\n        info('forceVariant')\r\n    }\r\n})\r\n\r\nasync function onPrepareArmorData(this: ArmorPF2e, wrapped: libWrapper.WrappedFunction) {\r\n    if (this.isShield) return wrapped()\r\n\r\n    const actor = this.actor\r\n    if (!actor || !actor.isOfType('character')) return wrapped()\r\n\r\n    const level = actor.level\r\n\r\n    this.system.potencyRune.value = level < 5 ? null : level < 11 ? 1 : level < 18 ? 2 : 3\r\n    this.system.resiliencyRune.value =\r\n        level < 8 ? null : level < 14 ? 'resilient' : level < 20 ? 'greaterResilient' : 'majorResilient'\r\n\r\n    wrapped()\r\n}\r\n\r\nasync function onPrapareWeaponData(this: WeaponPF2e, wrapped: libWrapper.WrappedFunction) {\r\n    const actor = this.actor\r\n    if (!actor || !actor.isOfType('character')) return wrapped()\r\n\r\n    const level = actor.level\r\n\r\n    if (this._source.system.temporary) {\r\n        const traits = this._source.system.traits.value\r\n        if (traits.includes('alchemical') && traits.includes('bomb')) return wrapped()\r\n    }\r\n\r\n    this.system.potencyRune.value = level < 2 ? null : level < 10 ? 1 : level < 16 ? 2 : 3\r\n    this.system.strikingRune.value = level < 4 ? null : level < 12 ? 'striking' : level < 19 ? 'greaterStriking' : 'majorStriking'\r\n\r\n    wrapped()\r\n}\r\n"],"names":["notify","str","arg1","arg2","arg3","type","data","undefined","permanent","ui","notifications","args","key","game","i18n","format","localize","registerWrapper","target","fn","libWrapper","register","async","onPrepareArmorData","wrapped","this","isShield","actor","isOfType","level","system","potencyRune","value","resiliencyRune","onPrapareWeaponData","_source","temporary","traits","includes","strikingRune","Hooks","once","user","isGM","settings","get","set"],"sourceRoot":""}